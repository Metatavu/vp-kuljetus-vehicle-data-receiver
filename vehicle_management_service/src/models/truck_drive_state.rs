/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TruckDriveState {
    /// Truck drive state ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Timestamp for truck drive state
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    #[serde(rename = "state")]
    pub state: models::TruckDriveStateEnum,
    /// Driver ID.
    #[serde(rename = "driverId", skip_serializing_if = "Option::is_none")]
    pub driver_id: Option<uuid::Uuid>,
    /// Driver card ID. This is used to identify the driver when creating a new drive state.
    #[serde(rename = "driverCardId", skip_serializing_if = "Option::is_none")]
    pub driver_card_id: Option<String>,
}

impl TruckDriveState {
    pub fn new(timestamp: i64, state: models::TruckDriveStateEnum) -> TruckDriveState {
        TruckDriveState {
            id: None,
            timestamp,
            state,
            driver_id: None,
            driver_card_id: None,
        }
    }
}

