/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Temperature : Represents a single temperature reading record
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Temperature {
    /// Unique identifier for the temperature record
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// The ID of the thermometer from which the reading was taken
    #[serde(rename = "thermometerId")]
    pub thermometer_id: uuid::Uuid,
    /// The temperature value in Celsius
    #[serde(rename = "value")]
    pub value: f32,
    /// The timestamp when the temperature was recorded
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
}

impl Temperature {
    /// Represents a single temperature reading record
    pub fn new(thermometer_id: uuid::Uuid, value: f32, timestamp: i64) -> Temperature {
        Temperature {
            id: None,
            thermometer_id,
            value,
            timestamp,
        }
    }
}
