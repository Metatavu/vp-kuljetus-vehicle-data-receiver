/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Towable : Represent single towable
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Towable {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The unique IMEI of the towable, used to identify it when associating with a thermometer.
    #[serde(rename = "imei", skip_serializing_if = "Option::is_none")]
    pub imei: Option<String>,
    #[serde(rename = "plateNumber")]
    pub plate_number: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Towable identification number. This is unique for each towable and should be used as a hardware identifier for this specific towable. 
    #[serde(rename = "vin")]
    pub vin: String,
    #[serde(rename = "creatorId", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<uuid::Uuid>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "lastModifierId", skip_serializing_if = "Option::is_none")]
    pub last_modifier_id: Option<uuid::Uuid>,
    #[serde(rename = "modifiedAt", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// Setting the archivedAt time marks the towable as archived. Towables marked as archived will not appear in list requests unless archived filter is set to true. Archived towable cannot be updated, unless archivedAt is first set to null. 
    #[serde(rename = "archivedAt", skip_serializing_if = "Option::is_none")]
    pub archived_at: Option<String>,
}

impl Towable {
    /// Represent single towable
    pub fn new(plate_number: String, r#type: Type, vin: String) -> Towable {
        Towable {
            id: None,
            name: None,
            imei: None,
            plate_number,
            r#type,
            vin,
            creator_id: None,
            created_at: None,
            last_modifier_id: None,
            modified_at: None,
            archived_at: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "TRAILER")]
    Trailer,
    #[serde(rename = "SEMI_TRAILER")]
    SemiTrailer,
    #[serde(rename = "DOLLY")]
    Dolly,
}

impl Default for Type {
    fn default() -> Type {
        Self::Trailer
    }
}

