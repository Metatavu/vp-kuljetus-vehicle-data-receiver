/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`find_truck_or_towable_thermometer`]
#[derive(Clone, Debug)]
pub struct FindTruckOrTowableThermometerParams {
    /// The unique ID of the thermometer
    pub thermometer_id: String
}

/// struct for passing parameters to the method [`list_truck_or_towable_thermometers`]
#[derive(Clone, Debug)]
pub struct ListTruckOrTowableThermometersParams {
    /// Filter thermometers by associated truck or towable ID. Should be used with entityType filter.
    pub entity_id: Option<String>,
    /// Filter thermometers by associated entity type (e.g., \"truck\", \"towable\")
    pub entity_type: Option<String>,
    /// Include archived thermometers in the results
    pub include_archived: Option<bool>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`update_truck_or_towable_thermometer`]
#[derive(Clone, Debug)]
pub struct UpdateTruckOrTowableThermometerParams {
    /// The unique ID of the thermometer
    pub thermometer_id: String,
    /// Payload
    pub update_truck_or_towable_thermometer_request: models::UpdateTruckOrTowableThermometerRequest
}


/// struct for typed errors of method [`find_truck_or_towable_thermometer`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindTruckOrTowableThermometerError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_or_towable_thermometers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckOrTowableThermometersError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_truck_or_towable_thermometer`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTruckOrTowableThermometerError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}


/// Retrieve the details of a specific truck or towable thermometer
pub async fn find_truck_or_towable_thermometer(configuration: &configuration::Configuration, params: FindTruckOrTowableThermometerParams) -> Result<models::TruckOrTowableThermometer, Error<FindTruckOrTowableThermometerError>> {

    let uri_str = format!("{}/v1/thermometers/{thermometerId}", configuration.base_path, thermometerId=crate::apis::urlencode(params.thermometer_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TruckOrTowableThermometer`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TruckOrTowableThermometer`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FindTruckOrTowableThermometerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all truck or towable thermometers.  Can optionally be filtered by vehicle association or archived status. 
pub async fn list_truck_or_towable_thermometers(configuration: &configuration::Configuration, params: ListTruckOrTowableThermometersParams) -> Result<Vec<models::TruckOrTowableThermometer>, Error<ListTruckOrTowableThermometersError>> {

    let uri_str = format!("{}/v1/thermometers", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.entity_id {
        req_builder = req_builder.query(&[("entityId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.entity_type {
        req_builder = req_builder.query(&[("entityType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_archived {
        req_builder = req_builder.query(&[("includeArchived", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckOrTowableThermometer&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckOrTowableThermometer&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckOrTowableThermometersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update the details of specific truck or towable thermometer. Currently only the name can be updated.
pub async fn update_truck_or_towable_thermometer(configuration: &configuration::Configuration, params: UpdateTruckOrTowableThermometerParams) -> Result<models::TruckOrTowableThermometer, Error<UpdateTruckOrTowableThermometerError>> {

    let uri_str = format!("{}/v1/thermometers/{thermometerId}", configuration.base_path, thermometerId=crate::apis::urlencode(params.thermometer_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&params.update_truck_or_towable_thermometer_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TruckOrTowableThermometer`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TruckOrTowableThermometer`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateTruckOrTowableThermometerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

