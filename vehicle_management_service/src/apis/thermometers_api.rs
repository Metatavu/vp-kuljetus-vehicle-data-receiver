/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`find_thermometer`]
#[derive(Clone, Debug)]
pub struct FindThermometerParams {
    /// The unique ID of the thermometer
    pub thermometer_id: String
}

/// struct for passing parameters to the method [`list_thermometers`]
#[derive(Clone, Debug)]
pub struct ListThermometersParams {
    /// Filter thermometers by associated truck or towable ID. Should be used with entityType filter.
    pub entity_id: Option<String>,
    /// Filter thermometers by associated entity type (e.g., \"truck\", \"towable\")
    pub entity_type: Option<String>,
    /// Include archived thermometers in the results
    pub include_archived: Option<bool>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`update_thermometer`]
#[derive(Clone, Debug)]
pub struct UpdateThermometerParams {
    /// The unique ID of the thermometer
    pub thermometer_id: String,
    /// Payload
    pub update_thermometer_request: models::UpdateThermometerRequest
}


/// struct for typed errors of method [`find_thermometer`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindThermometerError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_thermometers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListThermometersError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_thermometer`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateThermometerError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}


/// Retrieve the details of a specific thermometer
pub async fn find_thermometer(configuration: &configuration::Configuration, params: FindThermometerParams) -> Result<models::Thermometer, Error<FindThermometerError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let thermometer_id = params.thermometer_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/thermometers/{thermometerId}", local_var_configuration.base_path, thermometerId=crate::apis::urlencode(thermometer_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FindThermometerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all thermometers, optionally filtered by vehicle association or archived status
pub async fn list_thermometers(configuration: &configuration::Configuration, params: ListThermometersParams) -> Result<Vec<models::Thermometer>, Error<ListThermometersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity_id = params.entity_id;
    let entity_type = params.entity_type;
    let include_archived = params.include_archived;
    let first = params.first;
    let max = params.max;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/thermometers", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = entity_id {
        local_var_req_builder = local_var_req_builder.query(&[("entityId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = entity_type {
        local_var_req_builder = local_var_req_builder.query(&[("entityType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_archived {
        local_var_req_builder = local_var_req_builder.query(&[("includeArchived", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first {
        local_var_req_builder = local_var_req_builder.query(&[("first", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max {
        local_var_req_builder = local_var_req_builder.query(&[("max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListThermometersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update the details of a specific thermometer. Currently only the name can be updated.
pub async fn update_thermometer(configuration: &configuration::Configuration, params: UpdateThermometerParams) -> Result<models::Thermometer, Error<UpdateThermometerError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let thermometer_id = params.thermometer_id;
    let update_thermometer_request = params.update_thermometer_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/thermometers/{thermometerId}", local_var_configuration.base_path, thermometerId=crate::apis::urlencode(thermometer_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_thermometer_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateThermometerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

