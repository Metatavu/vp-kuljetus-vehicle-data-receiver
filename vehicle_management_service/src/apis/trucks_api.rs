/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_drive_state`]
#[derive(Clone, Debug)]
pub struct CreateDriveStateParams {
    /// truck id
    pub truck_id: String,
    /// Payload
    pub truck_drive_state: models::TruckDriveState
}

/// struct for passing parameters to the method [`create_truck`]
#[derive(Clone, Debug)]
pub struct CreateTruckParams {
    /// Payload
    pub truck: models::Truck
}

/// struct for passing parameters to the method [`create_truck_driver_card`]
#[derive(Clone, Debug)]
pub struct CreateTruckDriverCardParams {
    /// truck ID
    pub truck_id: String,
    /// Payload
    pub truck_driver_card: models::TruckDriverCard
}

/// struct for passing parameters to the method [`create_truck_location`]
#[derive(Clone, Debug)]
pub struct CreateTruckLocationParams {
    /// truck id
    pub truck_id: String,
    /// Payload
    pub truck_location: models::TruckLocation
}

/// struct for passing parameters to the method [`create_truck_odometer_reading`]
#[derive(Clone, Debug)]
pub struct CreateTruckOdometerReadingParams {
    /// truck id
    pub truck_id: String,
    /// Payload
    pub truck_odometer_reading: models::TruckOdometerReading
}

/// struct for passing parameters to the method [`create_truck_speed`]
#[derive(Clone, Debug)]
pub struct CreateTruckSpeedParams {
    /// truck id
    pub truck_id: String,
    /// Payload
    pub truck_speed: models::TruckSpeed
}

/// struct for passing parameters to the method [`delete_truck`]
#[derive(Clone, Debug)]
pub struct DeleteTruckParams {
    /// truck id
    pub truck_id: String
}

/// struct for passing parameters to the method [`delete_truck_driver_card`]
#[derive(Clone, Debug)]
pub struct DeleteTruckDriverCardParams {
    /// truck ID
    pub truck_id: String,
    /// driver card ID
    pub driver_card_id: String,
    /// Timestamp when the driver card was removed from the truck
    pub x_removed_at: String
}

/// struct for passing parameters to the method [`find_truck`]
#[derive(Clone, Debug)]
pub struct FindTruckParams {
    /// trucks id
    pub truck_id: String
}

/// struct for passing parameters to the method [`list_drive_states`]
#[derive(Clone, Debug)]
pub struct ListDriveStatesParams {
    /// truck id
    pub truck_id: String,
    /// Filter results by driver ID
    pub driver_id: Option<String>,
    /// Filter results by driver state
    pub state: Option<Vec<models::TruckDriveStateEnum>>,
    /// Filter results after given date-time
    pub after: Option<String>,
    /// Filter results before given date-time
    pub before: Option<String>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`list_truck_driver_cards`]
#[derive(Clone, Debug)]
pub struct ListTruckDriverCardsParams {
    /// truck ID
    pub truck_id: String
}

/// struct for passing parameters to the method [`list_truck_locations`]
#[derive(Clone, Debug)]
pub struct ListTruckLocationsParams {
    /// truck id
    pub truck_id: String,
    /// Filter results after given date-time
    pub after: Option<String>,
    /// Filter results before given date-time
    pub before: Option<String>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`list_truck_odometer_readings`]
#[derive(Clone, Debug)]
pub struct ListTruckOdometerReadingsParams {
    /// truck id
    pub truck_id: String,
    /// Filter results after given date-time
    pub after: Option<String>,
    /// Filter results before given date-time
    pub before: Option<String>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`list_truck_speeds`]
#[derive(Clone, Debug)]
pub struct ListTruckSpeedsParams {
    /// truck id
    pub truck_id: String,
    /// Filter results after given date-time
    pub after: Option<String>,
    /// Filter results before given date-time
    pub before: Option<String>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`list_truck_temperatures`]
#[derive(Clone, Debug)]
pub struct ListTruckTemperaturesParams {
    /// The unique ID of the truck
    pub truck_id: String,
    /// Include archived thermometers' data in the results
    pub include_archived: Option<bool>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`list_trucks`]
#[derive(Clone, Debug)]
pub struct ListTrucksParams {
    /// Filter results by plate number
    pub plate_number: Option<String>,
    /// Filter results by archived status
    pub archived: Option<bool>,
    /// Sort results by field
    pub sort_by: Option<models::TruckSortByField>,
    /// Sort direction
    pub sort_direction: Option<models::SortOrder>,
    /// Thermometer id
    pub thermometer_id: Option<String>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`update_truck`]
#[derive(Clone, Debug)]
pub struct UpdateTruckParams {
    /// truck id
    pub truck_id: String,
    /// Payload
    pub truck: models::Truck
}


/// struct for typed errors of method [`create_drive_state`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateDriveStateError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_truck`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTruckError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_truck_driver_card`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTruckDriverCardError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_truck_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTruckLocationError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_truck_odometer_reading`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTruckOdometerReadingError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_truck_speed`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTruckSpeedError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_truck`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTruckError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_truck_driver_card`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTruckDriverCardError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`find_truck`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindTruckError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_drive_states`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDriveStatesError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_driver_cards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckDriverCardsError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckLocationsError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_odometer_readings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckOdometerReadingsError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_speeds`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckSpeedsError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_truck_temperatures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTruckTemperaturesError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_trucks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTrucksError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_truck`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTruckError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}


/// Create new drive state for truck
pub async fn create_drive_state(configuration: &configuration::Configuration, params: CreateDriveStateParams) -> Result<(), Error<CreateDriveStateError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/driveStates", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };
    req_builder = req_builder.json(&params.truck_drive_state);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateDriveStateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new truck
pub async fn create_truck(configuration: &configuration::Configuration, params: CreateTruckParams) -> Result<models::Truck, Error<CreateTruckError>> {

    let uri_str = format!("{}/v1/trucks", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&params.truck);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Truck`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Truck`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTruckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new truck driver card.  If a card with same truck ID and card ID is already found with removedAt set, the existing card is restored. If a card with different truck ID and card ID is already found with removedAt set, the previous card is immediately deleted and the new card is created. If a card with the same truck ID and card ID is found with removedAt not set, the request is rejected with a 409 Conflict response. 
pub async fn create_truck_driver_card(configuration: &configuration::Configuration, params: CreateTruckDriverCardParams) -> Result<models::TruckDriverCard, Error<CreateTruckDriverCardError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/driverCards", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };
    req_builder = req_builder.json(&params.truck_driver_card);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TruckDriverCard`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TruckDriverCard`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTruckDriverCardError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new truck location. Used by vehicle data receiver to send truck location data.
pub async fn create_truck_location(configuration: &configuration::Configuration, params: CreateTruckLocationParams) -> Result<(), Error<CreateTruckLocationError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/locations", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };
    req_builder = req_builder.json(&params.truck_location);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTruckLocationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new truck odometer reading. Used by vehicle data receiver to send truck odometer reading data.
pub async fn create_truck_odometer_reading(configuration: &configuration::Configuration, params: CreateTruckOdometerReadingParams) -> Result<(), Error<CreateTruckOdometerReadingError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/odometerReadings", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };
    req_builder = req_builder.json(&params.truck_odometer_reading);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTruckOdometerReadingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new truck speed. Used by vehicle data receiver to send truck speed data.
pub async fn create_truck_speed(configuration: &configuration::Configuration, params: CreateTruckSpeedParams) -> Result<(), Error<CreateTruckSpeedError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/speeds", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };
    req_builder = req_builder.json(&params.truck_speed);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTruckSpeedError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes truck. For non-production use. Returns forbidden in production environment.
pub async fn delete_truck(configuration: &configuration::Configuration, params: DeleteTruckParams) -> Result<(), Error<DeleteTruckError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteTruckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes single truck driver card. Driver cards are deleted when they are removed from the truck.  The card is first soft-deleted by setting removedAt to value sent in X-Removed-At header. A background process then checks frequently for driver cards removed over a configurable grace period ago and deletes them permanently. This is done to prevent false positive driver card states coming in from telematics device. 
pub async fn delete_truck_driver_card(configuration: &configuration::Configuration, params: DeleteTruckDriverCardParams) -> Result<(), Error<DeleteTruckDriverCardError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/driverCards/{driverCardId}", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id), driverCardId=crate::apis::urlencode(params.driver_card_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("X-Removed-At", params.x_removed_at.to_string());
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-DataReceiver-API-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteTruckDriverCardError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Finds a truck by id.
pub async fn find_truck(configuration: &configuration::Configuration, params: FindTruckParams) -> Result<models::Truck, Error<FindTruckError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Truck`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Truck`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FindTruckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists drive states for truck.
pub async fn list_drive_states(configuration: &configuration::Configuration, params: ListDriveStatesParams) -> Result<Vec<models::TruckDriveState>, Error<ListDriveStatesError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/driveStates", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.driver_id {
        req_builder = req_builder.query(&[("driverId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.state {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("state".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("state", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = params.after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckDriveState&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckDriveState&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListDriveStatesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists truck driver cards. Used to check if a truck has a driver card inserted.
pub async fn list_truck_driver_cards(configuration: &configuration::Configuration, params: ListTruckDriverCardsParams) -> Result<Vec<models::TruckDriverCard>, Error<ListTruckDriverCardsError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/driverCards", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Keycloak-API-Key", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckDriverCard&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckDriverCard&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckDriverCardsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists Truck locations.
pub async fn list_truck_locations(configuration: &configuration::Configuration, params: ListTruckLocationsParams) -> Result<Vec<models::TruckLocation>, Error<ListTruckLocationsError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/locations", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckLocation&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckLocation&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckLocationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists truck odometer readings.
pub async fn list_truck_odometer_readings(configuration: &configuration::Configuration, params: ListTruckOdometerReadingsParams) -> Result<Vec<models::TruckOdometerReading>, Error<ListTruckOdometerReadingsError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/odometerReadings", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckOdometerReading&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckOdometerReading&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckOdometerReadingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists Truck speeds.
pub async fn list_truck_speeds(configuration: &configuration::Configuration, params: ListTruckSpeedsParams) -> Result<Vec<models::TruckSpeed>, Error<ListTruckSpeedsError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/speeds", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckSpeed&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckSpeed&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckSpeedsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve all temperatures from all thermometers related to a specific truck, possibly including data from archived thermometers.
pub async fn list_truck_temperatures(configuration: &configuration::Configuration, params: ListTruckTemperaturesParams) -> Result<Vec<models::TruckOrTowableTemperature>, Error<ListTruckTemperaturesError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}/temperatures", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.include_archived {
        req_builder = req_builder.query(&[("includeArchived", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TruckOrTowableTemperature&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TruckOrTowableTemperature&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTruckTemperaturesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists Trucks.
pub async fn list_trucks(configuration: &configuration::Configuration, params: ListTrucksParams) -> Result<Vec<models::Truck>, Error<ListTrucksError>> {

    let uri_str = format!("{}/v1/trucks", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.plate_number {
        req_builder = req_builder.query(&[("plateNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.archived {
        req_builder = req_builder.query(&[("archived", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sort_by {
        req_builder = req_builder.query(&[("sortBy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sort_direction {
        req_builder = req_builder.query(&[("sortDirection", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.thermometer_id {
        req_builder = req_builder.query(&[("thermometerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.first {
        req_builder = req_builder.query(&[("first", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max {
        req_builder = req_builder.query(&[("max", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Truck&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Truck&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTrucksError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates single truck
pub async fn update_truck(configuration: &configuration::Configuration, params: UpdateTruckParams) -> Result<models::Truck, Error<UpdateTruckError>> {

    let uri_str = format!("{}/v1/trucks/{truckId}", configuration.base_path, truckId=crate::apis::urlencode(params.truck_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&params.truck);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Truck`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Truck`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateTruckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

