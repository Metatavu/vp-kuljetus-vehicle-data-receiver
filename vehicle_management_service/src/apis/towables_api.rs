/*
 * VP-Kuljetus Vehicle Management Services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_towable`]
#[derive(Clone, Debug)]
pub struct CreateTowableParams {
    /// Payload
    pub towable: models::Towable
}

/// struct for passing parameters to the method [`delete_towable`]
#[derive(Clone, Debug)]
pub struct DeleteTowableParams {
    /// towable id
    pub towable_id: String
}

/// struct for passing parameters to the method [`find_towable`]
#[derive(Clone, Debug)]
pub struct FindTowableParams {
    /// towables id
    pub towable_id: String
}

/// struct for passing parameters to the method [`list_towables`]
#[derive(Clone, Debug)]
pub struct ListTowablesParams {
    /// Filter results by plate number
    pub plate_number: Option<String>,
    /// Filter results by archived status
    pub archived: Option<bool>,
    /// First result.
    pub first: Option<i32>,
    /// Max results.
    pub max: Option<i32>
}

/// struct for passing parameters to the method [`update_towable`]
#[derive(Clone, Debug)]
pub struct UpdateTowableParams {
    /// towable id
    pub towable_id: String,
    /// Payload
    pub towable: models::Towable
}


/// struct for typed errors of method [`create_towable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTowableError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_towable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTowableError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`find_towable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FindTowableError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_towables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTowablesError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_towable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTowableError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}


/// Create new towable
pub async fn create_towable(configuration: &configuration::Configuration, params: CreateTowableParams) -> Result<models::Towable, Error<CreateTowableError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let towable = params.towable;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/towables", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&towable);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateTowableError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes towable. For non-production use. Returns forbidden response in production environment.
pub async fn delete_towable(configuration: &configuration::Configuration, params: DeleteTowableParams) -> Result<(), Error<DeleteTowableError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let towable_id = params.towable_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/towables/{towableId}", local_var_configuration.base_path, towableId=crate::apis::urlencode(towable_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteTowableError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Finds a towable by id.
pub async fn find_towable(configuration: &configuration::Configuration, params: FindTowableParams) -> Result<models::Towable, Error<FindTowableError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let towable_id = params.towable_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/towables/{towableId}", local_var_configuration.base_path, towableId=crate::apis::urlencode(towable_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FindTowableError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists Towables.
pub async fn list_towables(configuration: &configuration::Configuration, params: ListTowablesParams) -> Result<Vec<models::Towable>, Error<ListTowablesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let plate_number = params.plate_number;
    let archived = params.archived;
    let first = params.first;
    let max = params.max;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/towables", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = plate_number {
        local_var_req_builder = local_var_req_builder.query(&[("plateNumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = archived {
        local_var_req_builder = local_var_req_builder.query(&[("archived", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first {
        local_var_req_builder = local_var_req_builder.query(&[("first", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max {
        local_var_req_builder = local_var_req_builder.query(&[("max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListTowablesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates single towable
pub async fn update_towable(configuration: &configuration::Configuration, params: UpdateTowableParams) -> Result<models::Towable, Error<UpdateTowableError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let towable_id = params.towable_id;
    let towable = params.towable;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/towables/{towableId}", local_var_configuration.base_path, towableId=crate::apis::urlencode(towable_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&towable);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateTowableError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

